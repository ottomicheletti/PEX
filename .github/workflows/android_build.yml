name: Build Android APK and Release

on:
  push:
    branches:
      - main # Dispara o workflow em pushes para a branch main
  workflow_dispatch: # Permite disparar manualmente pela UI do GitHub Actions

jobs:
  build_job:
    name: Build APK
    runs-on: ubuntu-latest
    outputs:
      apk_filename: agpop.apk # Nome final do APK para o release
      artifact_name: build-artifact-${{ github.run_number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Create .env file from Secrets
        if: env.FIREBASE_ANDROID_API_KEY != ''
        run: |
          echo "FIREBASE_ANDROID_API_KEY=${{ secrets.FIREBASE_ANDROID_API_KEY }}" >> .env
          echo "FIREBASE_ANDROID_APP_ID=${{ secrets.FIREBASE_ANDROID_APP_ID }}" >> .env
          echo "FIREBASE_ANDROID_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_ANDROID_MESSAGING_SENDER_ID }}" >> .env
          echo "FIREBASE_ANDROID_PROJECT_ID=${{ secrets.FIREBASE_ANDROID_PROJECT_ID }}" >> .env
          echo "FIREBASE_ANDROID_STORAGE_BUCKET=${{ secrets.FIREBASE_ANDROID_STORAGE_BUCKET }}" >> .env

          echo "FIREBASE_IOS_API_KEY=${{ secrets.FIREBASE_IOS_API_KEY }}" >> .env
          echo "FIREBASE_IOS_APP_ID=${{ secrets.FIREBASE_IOS_APP_ID }}" >> .env
          echo "FIREBASE_IOS_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_IOS_MESSAGING_SENDER_ID }}" >> .env
          echo "FIREBASE_IOS_PROJECT_ID=${{ secrets.FIREBASE_IOS_PROJECT_ID }}" >> .env
          echo "FIREBASE_IOS_STORAGE_BUCKET=${{ secrets.FIREBASE_IOS_STORAGE_BUCKET }}" >> .env
          echo "FIREBASE_IOS_BUNDLE_ID=${{ secrets.FIREBASE_IOS_BUNDLE_ID }}" >> .env
        env:
          FIREBASE_ANDROID_API_KEY: ${{ secrets.FIREBASE_ANDROID_API_KEY }}
          FIREBASE_ANDROID_APP_ID: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          FIREBASE_ANDROID_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_ANDROID_MESSAGING_SENDER_ID }}
          FIREBASE_ANDROID_PROJECT_ID: ${{ secrets.FIREBASE_ANDROID_PROJECT_ID }}
          FIREBASE_ANDROID_STORAGE_BUCKET: ${{ secrets.FIREBASE_ANDROID_STORAGE_BUCKET }}

          FIREBASE_IOS_API_KEY: ${{ secrets.FIREBASE_IOS_API_KEY }}
          FIREBASE_IOS_APP_ID: ${{ secrets.FIREBASE_IOS_APP_ID }}
          FIREBASE_IOS_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_IOS_MESSAGING_SENDER_ID }}
          FIREBASE_IOS_PROJECT_ID: ${{ secrets.FIREBASE_IOS_PROJECT_ID }}
          FIREBASE_IOS_STORAGE_BUCKET: ${{ secrets.FIREBASE_IOS_STORAGE_BUCKET }}
          FIREBASE_IOS_BUNDLE_ID: ${{ secrets.FIREBASE_IOS_BUNDLE_ID }}

      - name: Build APK release
        run: flutter build apk --release --no-tree-shake-icons

      - name: Rename APK
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/agpop.apk

      - name: List output files (para depuração)
        run: ls -R build/app/outputs/flutter-apk/

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ jobs.build_job.outputs.artifact_name }}
          path: build/app/outputs/flutter-apk/agpop.apk
          if-no-files-found: error

  release_job:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build_job
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_job.outputs.artifact_name }}
          path: ./apk-artifact

      - name: List downloaded files (para depuração)
        run: ls -R ./apk-artifact/

      - name: Create Release and Upload APK
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Release AGPOP v${{ github.run_number }}
          body: |
            Release automática do AGPOP - Build #${{ github.run_number }}
            Commit: ${{ github.sha }}
            APK da versão (`agpop.apk`) está anexado.
          draft: false
          prerelease: false
          files: ./apk-artifact/${{ needs.build_job.outputs.apk_filename }}
